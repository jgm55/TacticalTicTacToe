//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
namespace AssemblyCSharp
{
    public enum MoveType
    {
        REMOVE, MOVE, PLACE
    }
	public class Move
	{
        MoveType type;
		private Vector2 position;
		private Vector2 position2;

		/*
		 * Takes in multiple positions to click
		 * */
		public Move (Vector2 oldPos, Vector2 newPos)
		{
            position = oldPos;
            position2 = newPos;
            type = MoveType.MOVE;
		}

		/*
		 * Takes in just a single position to click
		 * */
		public Move (int x, int y, MoveType type)
		{
			position = new Vector2(x,y);
			position2 = new Vector2(-1,-1);
            this.type = type;
		}

		/**
		 * Returns a one or two element array in the order that the
		 * squares needs to be clicked to do the move
		 * */
		public Vector2[] getClicks(){
			Vector2[] clicks;
			if(position2.x != -1f){
				clicks = new Vector2[2];
				clicks[1] = position2;
			} else {
				clicks = new Vector2[1];
			}
			clicks[0] = position;
			return clicks;
		}

		public bool Equals(Move p)
		{
			// If parameter is null return false:
			if ((object)p == null)
			{
				return false;
			}
			
			// Return true if the fields match:
			//return (p.position.x == position.x) && (p.position.y == position.y) &&
			//	(p.position2.x == position2.x) && (p.position2.y == position2.y);
			return p.position.Equals(position) && p.position2.Equals(position2);
		}
		
		public override int GetHashCode()
		{
			return position.GetHashCode()^position2.GetHashCode();
		}

		public override string ToString ()
		{
			return position.ToString() + " " + position2.ToString();
		}
	}
}

